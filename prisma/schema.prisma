
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRoles       @default(USER)
  accounts      Account[]
  
  // Optional for WebAuthn support
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

/// community database schema

model Profile {
  id        String   @id @default(cuid())
  userId    String  @unique
  name      String
  image     String? @db.Text
  email     String

  kelas     Kelas[]
  member    Member[]
  room      Room[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Kelas {
  id        String   @id @default(cuid())
  name      String
  imageUrl  String? @db.Text
  inviteCode String @unique
  profileId String

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  member    Member[]
  room      Room[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRoles {
  TEACHER
  MODERATOR
  STUDENT
}
model Member {
  id        String   @id @default(cuid())
  role      MemberRoles @default(STUDENT)
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  kelasId   String
  kelas     Kelas @relation(fields: [kelasId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([kelasId])
}

enum RoomType {
  TEXT
  AUDIO
  VIDEO
  
}

model Room {
  id        String   @id @default(cuid())
  name      String
  type      RoomType @default(TEXT)


  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  
  kelasId   String
  kelas     Kelas @relation(fields: [kelasId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([kelasId])
}